#Условие задачи :
#В первом поле камни с числом менялись постоянно (от 3 до 20) случайным образом, а второе было всегда пустым.
#Во вторую вставку нужно было написать те пары чисел друг за другом, чтобы число из первой вставки было кратно(делилось без остатка) сумме их значений.
#Составьте алгоритм, используя циклы, чтобы в независимости от введённого числа n (от 3 до 20) программа выдавала нужный пароль result, для одного введённого числа.
#/////////////////////////////////////////////


import random
# Consider this snippet from ./module_2_6.py


def old_solver():

  # n = random.randint(3, 20) # используете это, чтобы получить случайное число от 3 до 20
  n = int(input("Введите число от 3 до 20: "))
  result = ""
  list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

  for i in range(len(list_1) - 1):
    for j in range(i + 1, len(list_1)):
      numKsum = n % (list_1[i] + list_1[j]) == 0
      if numKsum:
        result = result + f"{list_1[i]}{list_1[j]}"
  print(f"{n} - число из первой вставки\n{result} - нужный пароль")


old_solver()


#/////////////////////////////////////////////
#Неудачная попытка решения задачи из-за недопониманности самой задачи, 
#так как я думал что кол-во камней меняется тоже, из-за чего кол-во элементов изменяется при запуске программы, 
#а также я думал что нужно не число, а пара числел из списка кратной сумме элементов из этого списка.
# def old_solver():
#   list_1 = []
#   result = 0
#   # kamnei = random.randint(3, 20)
#   n = random.randint(3, 20)
#   # for k in range(kamnei):
#   #   n = random.randint(1, 20)
#   #   list_1.append(n)

#   for i in range(len(list_1)-1):
#     for j in range(i+1, len(list_1)):
#       numKsum = (list_1[i]+list_1[j]) % n == 0
#       if numKsum:
#         result = result + str(list_1[i]) + str(list_1[j])
#   print(list_1)
#   print(sum(list_1))
#   print(result)
